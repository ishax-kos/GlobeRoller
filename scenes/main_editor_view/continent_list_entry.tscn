[gd_scene load_steps=4 format=3 uid="uid://bkop2yodc3xad"]

[sub_resource type="GDScript" id="GDScript_u3t2s"]
script/source = "extends HBoxContainer
class_name ContinentListEntry

var continent: Continent

signal moved_entry(from: int, to: int)
signal change_entry_visibility(signalling: int, state: bool)
signal entry_selected(cont: Continent, entry: int)


func _ready() -> void:
    assert(continent)
    data_update()


func data_update() -> void:
    $TextureRect.texture = Continent.projection_icons[continent.projection]
    $Label.text = continent.name
    

func _on_gui_input(event: InputEvent) -> void:
    if event as InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_LEFT:
            if event.pressed:
                grab_click_focus()

func edit_text():
    $LineEdit.text = $Label.text
    $LineEdit.show()
    $LineEdit.select_all()
    $LineEdit.grab_focus()
    $Label.hide()


func _on_line_edit_text_submitted(new_text: String) -> void:
    edit_text_done()
func _on_line_edit_focus_exited() -> void:
    edit_text_done()

func edit_text_done() -> void:
    $Label.text = $LineEdit.text
    $Label.show()
    $LineEdit.hide()


func _on_label_gui_input(event: InputEvent) -> void:
    if event as InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_LEFT\\
        && event.double_click:
            edit_text()
            accept_event()


func _get_drag_data(at_position: Vector2) -> Variant:
    set_drag_preview(self.duplicate(0))
    return get_index()
    
func _can_drop_data(at_position: Vector2, data: Variant) -> bool:
    return data is int

func _drop_data(at_position: Vector2, data: Variant) -> void:
    if Input.is_action_pressed(\"modifier_set_parent\"):
        OS.alert(\"Parenting not yet implemented\")
    else:
        var pos := get_index()
        if size.y/2 < at_position.y:
            pos += 1
        emit_signal(\"moved_entry\", data as int, pos)

@export var focus_box : StyleBox

func _draw() -> void:
    if has_focus():
        draw_style_box(focus_box, Rect2(Vector2.ZERO, size))


func _on_visibility_toggled(toggled_on: bool) -> void:
    change_entry_visibility.emit(get_index(), toggled_on)


func _on_focus_entered() -> void:
    entry_selected.emit(continent, get_index())
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_owq0t"]
bg_color = Color(1, 1, 1, 1)
draw_center = false
border_width_left = 3
border_width_top = 3
border_width_right = 3
border_width_bottom = 3
corner_radius_top_left = 3
corner_radius_top_right = 3
corner_radius_bottom_right = 3
corner_radius_bottom_left = 3
expand_margin_left = 3.0
expand_margin_top = 3.0
expand_margin_right = 3.0
expand_margin_bottom = 3.0

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_e2xog"]
load_path = "res://.godot/imported/icon.png-487276ed1e3a0c39cad0279d744ee560.bptc.ctex"

[node name="Entry" type="HBoxContainer"]
offset_right = 173.0
offset_bottom = 24.0
focus_mode = 2
mouse_filter = 0
script = SubResource("GDScript_u3t2s")
focus_box = SubResource("StyleBoxFlat_owq0t")

[node name="TextureRect" type="TextureRect" parent="."]
custom_minimum_size = Vector2(24, 24)
layout_mode = 2
size_flags_horizontal = 0
size_flags_vertical = 4
texture = SubResource("CompressedTexture2D_e2xog")
expand_mode = 2
stretch_mode = 5

[node name="Label" type="Label" parent="."]
layout_mode = 2
size_flags_horizontal = 3
mouse_filter = 1
text = "This is an entry"

[node name="LineEdit" type="LineEdit" parent="."]
visible = false
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 4
expand_to_text_length = true
flat = true
caret_blink = true

[node name="Visibility" type="CheckBox" parent="."]
layout_mode = 2
size_flags_horizontal = 8
size_flags_vertical = 4
mouse_filter = 1
button_pressed = true

[connection signal="focus_entered" from="." to="." method="_on_focus_entered"]
[connection signal="gui_input" from="." to="." method="_on_gui_input"]
[connection signal="gui_input" from="Label" to="." method="_on_label_gui_input"]
[connection signal="focus_exited" from="LineEdit" to="." method="_on_line_edit_focus_exited"]
[connection signal="text_submitted" from="LineEdit" to="." method="_on_line_edit_text_submitted"]
[connection signal="toggled" from="Visibility" to="." method="_on_visibility_toggled"]
